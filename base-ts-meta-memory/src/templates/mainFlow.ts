import { addKeyword, EVENTS } from "@builderbot/bot";
import sheetsService from "~/services/sheetsService";

import { addKeyword, createFlow, EVENTS } from "@builderbot/bot";
import { createBot, createProvider, utils } from "@builderbot/bot";
import { MetaProvider as Provider } from "@builderbot/provider-meta";
import { addKeyword, addAction } from "@builderbot/bot";

interface BotState {
  userName?: string;
  selectedCity?: string;
  available?: boolean;
  name?: string;
  latitude?: string;
  longitude?: string;
  carType?: string;
  disponibilidad?: string;
  peso?: string;
  cubicaje?: string;
  placa?: string;
  hojaVida?: string;
}

const userDecisions = {
  name: "",
  latitude: "",
  longitude: "",
  carType: "",
  peso: "",
  cubicaje: "",
  placa: "",
  hojaVida: "",
  disponibilidad: "",
  remesa: "",
};

const userDecisionsAdmin = {
  name: "",
  decisionAdministrativa: "",
};

//Flujo Bogota
const flowBogota = addKeyword(EVENTS.ACTION)
  .addAnswer(
    "Te ayudar√© comparti√©ndote los contactos importantes de Bogota üì±üìû"
  )
  .addAnswer("", null, async (ctx, { provider }) => {
    await provider.sendContacts(ctx.from, [
      {
        name: {
          formatted_name: "Saldos Bogota",
          first_name: "Saldos Bogota",
        },
        phones: [
          {
            phone: "+573147516693",
            type: "CELL",
          },
        ],
      },
    ]);
  })
  .addAnswer("", null, async (ctx, { provider }) => {
    await provider.sendContacts(ctx.from, [
      {
        name: {
          formatted_name: "Despachos Bogota",
          first_name: "Despachos Bogota",
        },
        phones: [
          {
            phone: "+573147516693",
            type: "CELL",
          },
        ],
      },
    ]);
  })
  .addAnswer("", null, async (ctx, { flowDynamic }) => {
    // A√±adir un retraso de 2 segundos (2000 ms)
    await new Promise((resolve) => setTimeout(resolve, 2000));

    // Despu√©s del delay, se env√≠an las respuestas
    await flowDynamic([
      "Si no te permite enviarles un mensaje üì©, puedes agregarlos a contactos y escribirles ‚úçÔ∏è",
      "Si no deseas escribirles, puedes llamarlos üìû",
    ]);
  });

//Flujo cali
const flowCali = addKeyword(EVENTS.ACTION)
  .addAnswer("Te ayudar√© comparti√©ndote los contactos importantes de Cali üì±üìû")
  .addAnswer("", null, async (ctx, { provider }) => {
    await provider.sendContacts(ctx.from, [
      {
        name: {
          formatted_name: "Saldos Cali",
          first_name: "Saldos Cali",
        },
        phones: [
          {
            phone: "+573147516693",
            type: "WORK",
          },
        ],
      },
    ]);
  })
  .addAnswer("", null, async (ctx, { provider }) => {
    await provider.sendContacts(ctx.from, [
      {
        name: {
          formatted_name: "Despachos Cali",
          first_name: "Despachos Cali",
        },
        phones: [
          {
            phone: "+573147516693",
            type: "WORK",
          },
        ],
      },
    ]);
  })
  .addAnswer("", null, async (ctx, { flowDynamic }) => {
    // A√±adir un retraso de 2 segundos (2000 ms)
    await new Promise((resolve) => setTimeout(resolve, 2000));

    // Despu√©s del delay, se env√≠an las respuestas
    await flowDynamic([
      "Si no te permite enviarles un mensaje üì©, puedes agregarlos a contactos y escribirles ‚úçÔ∏è",
      "Si no deseas escribirles, puedes llamarlos üìû",
    ]);
  });

//Flow carga
const flowCarga = addKeyword(EVENTS.ACTION)
  .addAnswer("Gracias por escogernos para buscar Carga üöõ")

  // Ubicaci√≥n del vehiculo
  .addAnswer(
    [
      "Por favor, comparte tu ubicaci√≥n actual üìç",
      "Para esto, usa el clip üìé o el √≠cono + y selecciona 'Ubicaci√≥n'",
    ],
    {
      capture: true,
    },
    async (ctx, { state }) => {
      // Actualizar las coordenadas en userDecisions
      if (ctx.type === "location") {
        userDecisions.latitude = ctx.latitude?.toString();
        userDecisions.longitude = ctx.longitude?.toString();
        console.log("Ubicaci√≥n capturada:", {
          latitude: ctx.latitude,
          longitude: ctx.longitude,
        });
      }
    }
  )

  // Tipo de vehiculo

  .addAnswer(
    [
      "Por favor, selecciona el tipo de veh√≠culo escribiendo el n√∫mero correspondiente:",
      "",
      "1Ô∏è‚É£ Turbo",
      "2Ô∏è‚É£ Sencillo",
      "3Ô∏è‚É£ Doble Troque",
      "4Ô∏è‚É£ Mini Mula",
      "5Ô∏è‚É£ Mula",
      "6Ô∏è‚É£ Ninguna de las anteriores",
    ],
    { capture: true },
    async (ctx, { flowDynamic, state }): Promise<void> => {
      // Mapear n√∫meros a tipos de veh√≠culo
      const vehicleTypes = {
        "1": "Turbo",
        "2": "Sencillo",
        "3": "Doble Troque",
        "4": "Mini Mula",
        "5": "Mula",
        "6": "Otro",
      };

      // Obtener el tipo de veh√≠culo basado en la selecci√≥n del usuario
      const selectedType = vehicleTypes[ctx.body] || ctx.body;
      userDecisions.carType = selectedType;
      await state.update({ carType: selectedType });
      await flowDynamic(
        `El tipo de carro que seleccionaste es: ${selectedType}`
      );
      console.log("CARRO TIPO:", userDecisions.carType);
    }
  )
  .addAnswer(
    [
      "¬øTu veh√≠culo tiene disponibilidad inmediata para cargar? üöõ",
      "",
      "1Ô∏è‚É£ S√≠, disponible ahora",
      "2Ô∏è‚É£ No, disponible en otro momento",
    ],
    { capture: true },
    async (ctx, { flowDynamic, fallBack, state }): Promise<void> => {
      const opcion = ctx.body;

      if (!["1", "2"].includes(opcion)) {
        await flowDynamic("‚ùå Por favor, selecciona 1 o 2");
        return fallBack();
      }

      const disponibilidad = opcion === "1" ? "Inmediata" : "Posterior";
      userDecisions.disponibilidad = disponibilidad;
      await state.update({ disponibilidad });

      await flowDynamic(`‚úÖ Entendido! Disponibilidad: ${disponibilidad}`);
    }
  )

  // Peso del vehiculo
  .addAction(async (_, { flowDynamic }): Promise<void> => {
    await flowDynamic([
      "¬øCu√°l es el peso m√°ximo de carga que puede transportar tu veh√≠culo? üèãÔ∏è‚Äç‚ôÇÔ∏è",
      "Por favor, ingresa el peso en kilogramos (KG)",
    ]);
  })

  .addAction(
    { capture: true },
    async (ctx, { flowDynamic, state }): Promise<void> => {
      userDecisions.peso = ctx.body;
      await state.update({ peso: ctx.body });
      await flowDynamic(
        `‚úÖ Perfecto! El peso m√°ximo de carga es: ${ctx.body} KG`
      );
    }
  )

  // Cubicaje del vehiculo
  .addAction(async (_, { flowDynamic }): Promise<void> => {
    await flowDynamic([
      "¬øCu√°l es el volumen de carga de tu veh√≠culo? üì¶",
      "Por favor, ingresa el volumen en metros c√∫bicos (M¬≥)",
    ]);
  })

  .addAction(
    { capture: true },
    async (ctx, { flowDynamic, state }): Promise<void> => {
      userDecisions.cubicaje = ctx.body;
      await state.update({ cubicaje: ctx.body });
      await flowDynamic(`‚úÖ Excelente! El volumen de carga es: ${ctx.body} M¬≥`);
    }
  )

  // Placa del vehiculo
  .addAction(async (_, { flowDynamic }): Promise<void> => {
    await flowDynamic([
      "¬øCu√°l es la placa de tu veh√≠culo? üöõ",
      "Por favor, ingresa la placa sin espacios",
    ]);
  })

  .addAction(
    { capture: true },
    async (ctx, { flowDynamic, state }): Promise<void> => {
      userDecisions.placa = ctx.body;
      await state.update({ placa: ctx.body });
      await flowDynamic(`‚úÖ Gracias! La placa registrada es: ${ctx.body}`);
    }
  )

  //Hoja de vida
  .addAnswer([
    "Cuentas con hoja de vida con nosotros?",
    "Si no cuentas con una no te preocupes, te ayudaremos a hacerla ",
  ])
  .addAction(async (ctx, { provider }) => {
    await provider.sendButtons(
      ctx.from,
      [{ body: "Si" }, { body: "No" }],
      `Porfavor selecciona si cuentas con hoja de vida o no.`
    );
  })
  .addAction(
    { capture: true },
    async (ctx, { flowDynamic, state }): Promise<void> => {
      userDecisions.hojaVida = ctx.body;
      await state.update({ hojaVida: ctx.body });

      try {
        // Aseg√∫rate de que ctx.from existe y es una cadena v√°lida
        if (!ctx.from) {
          throw new Error("N√∫mero de tel√©fono no disponible");
        }

        await sheetsService.createUser(ctx.from, userDecisions);
        await flowDynamic(
          `Muchas gracias, tu informaci√≥n ha sido guardada exitosamente y en breves te contactaremos.`
        );
      } catch (error) {
        console.error("Error completo al crear usuario:", error);
        await flowDynamic(
          `Lo siento, hubo un problema al guardar tu informaci√≥n. Por favor, intenta nuevamente m√°s tarde.`
        );
      }

      console.log("HOJA DE VIDA:", userDecisions.hojaVida);
      console.log("Datos completos:", userDecisions);
    }
  );

const flowSaldos = addKeyword(EVENTS.ACTION)
  .addAnswer("Ahora te ayudar√© a buscar remesas üì¶")

  // Solicitar al usuario el n√∫mero de remesa
  .addAction(async (_, { flowDynamic }): Promise<void> => {
    await flowDynamic([
      "¬øCu√°l es el n√∫mero de remesa a buscar?",
      "Por favor, ingresa la remesa sin espacios.",
    ]);
  })

  // Capturar el n√∫mero de remesa ingresado por el usuario
  .addAction(
    { capture: true },
    async (ctx, { flowDynamic, state }): Promise<void> => {
      try {
        // Guardar la remesa en el estado y en userDecisions
        userDecisions.remesa = ctx.body;
        await state.update({ remesa: ctx.body });

        // Confirmar al usuario
        await flowDynamic(
          `‚úÖ ¬°Gracias! La remesa ${ctx.body} est√° siendo buscada...`
        );

        // Llamar a un servicio para buscar la remesa
        const remesaData = await sheetsService.getRemesa(ctx.body);

        // Verificar si se encontr√≥ la remesa
        if (remesaData) {
          await flowDynamic([
            "‚úÖ ¬°Remesa encontrada!",
            `Aqu√≠ est√°n los detalles:`,
            `N√∫mero: ${remesaData[0]}`,
            `Destinatario: ${remesaData[1]}`,
            `Estado: ${remesaData[2]}`,
            `Fecha: ${remesaData[3]}`,
          ]);
        } else {
          await flowDynamic(
            `‚ùå Lo siento, no se encontr√≥ la remesa con el n√∫mero: ${ctx.body}.`
          );
        }
      } catch (error) {
        console.error("Error al buscar la remesa:", error);
        await flowDynamic(
          `‚ö†Ô∏è Lo siento, ocurri√≥ un problema al buscar la remesa. Intenta nuevamente m√°s tarde.`
        );
      }
    }
  );


// Flujos administrativos
const flowAdministrativos = addKeyword(EVENTS.ACTION)
  .addAnswer("Bienvenido a la parte administrativa") // Elimina el punto innecesario aqu√≠

  .addAnswer(
    "¬øTe interesan comunicarte con Cali o Bogota?",
    {
      buttons: [
        { body: "Cali" },
        { body: "Bogota" }, // Elimina el espacio adicional
        { body: "Menu Principal" }, // Elimina el espacio adicional
      ],
      capture: true,
    },
    async (ctx, { state, gotoFlow }) => {
      const answer = ctx.body.toLowerCase();
      if (answer === "cali") {
        await state.update({ available: true });
        return gotoFlow(flowCali);
      } else if (answer === "bogota") {
        // Compara directamente con la cadena 'bogota'
        return gotoFlow(flowBogota);
      } else if (answer === "menu principal") {
        // Maneja el caso del men√∫ principal
        return gotoFlow(mainFlow);
      }
    }
  );

const mainFlow = addKeyword(EVENTS.WELCOME)
  .addAnswer(
    "üöö ¬°Hola! Bienvenido a Rutix, queremos integrar la log√≠stica en Colombia"
  )
  .addAction(async (_, { flowDynamic }): Promise<void> => {
    await flowDynamic("Cu√°l es tu nombre?");
  })
  .addAction(
    { capture: true },
    async (ctx, { flowDynamic, state }): Promise<void> => {
      userDecisions.name = ctx.body; // Guardamos la decisi√≥n del usuario en name
      await state.update({ name: ctx.body });
      await flowDynamic(
        `Hola ${ctx.body} es un gusto tenerte con nosotros de nuevo üòä`
      );
    }
  )
  .addAnswer(
    "¬øTe interesan buscar carga o procesos administrativos con Rutix?",
    {
      buttons: [
        { body: "Buscar Carga üöö" },
        { body: "Administrativos üñ•Ô∏è" },
        { body: "Averiguar Saldo" },
      ],
      capture: true,
    },
    async (ctx, { state, gotoFlow }) => {
      const answer = ctx.body.toLowerCase();
      if (answer.includes("buscar carga")) {
        state.available = true;
        return gotoFlow(flowCarga);
      } else if (answer.includes("administrativos")) {
        return gotoFlow(flowAdministrativos);
      } else if (answer.includes("saldo")) {
        return gotoFlow(flowSaldos);
      } else {
        return gotoFlow(mainFlow);
      }
    }
  );

// Exportaciones

export { mainFlow, flowCarga, flowAdministrativos, flowCali, flowBogota ,flowSaldos};
